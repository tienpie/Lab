## B√ÄI T·∫¨P' K√äT NUMPY
# T·∫°o m·ªôt m√°ng numpy c√≥ k√≠ch th∆∞∆°c 150 x 5. H√£y t∆∞·ªüng t∆∞·ª£ng m·∫Øng n√†y ch·ª©a 150 m·∫´u v·ªÅ chi·ªÅu cao, c·∫ßn n·∫∑ng, tu·ªïi, l∆∞∆°ng, GPA c·ªßa sinh vi√™n VLU 
# Chia m·∫£ng b·ªën c·ªôt ƒë·∫ßu ti√™n th√†nh m·ªôt bi·∫øn c√≥ t√™n l√† X v√† c·ªôt cu·ªëi c√πng th√†nh y 
# Chia X th√†nh X_tran v√† X_test ch·ª©a 70% d·ªØ li·ªáu v√† chia y th√†nh y _train v√† y_test, trong ƒë√≥ y_train ch·ª©a 70% d·ªØ li·ªáu. 
# T·∫°o 10 t·∫≠p d·ªØ li·ªáu kh√¥ng ch√≤ng ch√©o c·ªßa _train 

# -*- coding: utf-8 -*-
import numpy as np
from sklearn.model_selection import train_test_split

# ƒê·∫∑t seed ƒë·ªÉ k·∫øt qu·∫£ nh·∫•t qu√°n
np.random.seed(42)

# 1. T·∫°o m·ªôt m·∫£ng NumPy c√≥ k√≠ch th∆∞·ªõc 150x5
data = np.random.uniform(0, 10, (150, 5))

# 2. Chia m·∫£ng th√†nh X (4 c·ªôt ƒë·∫ßu) v√† y (c·ªôt cu·ªëi)
X = data[:, :-1]  # L·∫•y t·∫•t c·∫£ h√†ng, b·ªè c·ªôt cu·ªëi
y = data[:, -1]   # L·∫•y c·ªôt cu·ªëi c√πng

# 3. Chia d·ªØ li·ªáu th√†nh t·∫≠p train (70%) v√† test (30%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 4. T·∫°o 10 t·∫≠p d·ªØ li·ªáu kh√¥ng ch·ªìng ch√©o t·ª´ X_train v√† y_train
num_splits = 10
split_size = len(X_train) // num_splits  # K√≠ch th∆∞·ªõc m·ªói t·∫≠p con

X_splits = [X_train[i * split_size:(i + 1) * split_size] for i in range(num_splits)]
y_splits = [y_train[i * split_size:(i + 1) * split_size] for i in range(num_splits)]

# Ki·ªÉm tra k√≠ch th∆∞·ªõc c√°c t·∫≠p d·ªØ li·ªáu
print(f"K√≠ch th∆∞·ªõc X_train: {X_train.shape}, X_test: {X_test.shape}")
print(f"S·ªë l∆∞·ª£ng t·∫≠p con: {len(X_splits)}, K√≠ch th∆∞·ªõc m·ªói t·∫≠p: {X_splits[0].shape}")
########
# B√†i t·∫≠p t·∫øt v·ªÅ nh√†

# Cho ma tr·∫≠n = [
#  [99,99,99],
#  [99,99,99],
#  [99,99,99]
#]
# gi√° s·ª≠ 0 = 0 v√† 1 l√† x 
# nh·∫≠n ƒë·∫ßu v√†o t·ª´ ph√≠a X v√† 0 lu√¢n phi√™n 
# cho c√°c b·∫°n m·ªôt c·∫≠p ch√≠ s·ªë 
# n·∫øu ph√≠a x nh·∫≠p ((0,0)) th√¨ ma tr·∫≠n tr·ªü th√†nh
#[
#[X,99,99],
#[99,99,99],
#[99,99,99]
#]
# n·∫øu ph√≠a O nh·∫≠p ((0,0)) th√¨ y√™u c√¢u nh·∫≠p l·∫°i v√† n·∫øu kh√¥ng th√¨ ƒëi·ªÅn v√†o ma tr·∫≠n
# th·ª≠ th√°ch c·ªßa c√°c b·∫°n ·ªü nh√† ƒÉn t·∫øt: n·∫øu ai ƒë√≥ c√≥ ba √¥ li√™n ti·∫øp th√¨ d·ª´ng tr√≤ ch∆°i.

# -*- coding: utf-8 -*-
import numpy as np

# Kh·ªüi t·∫°o ma tr·∫≠n 3x3 v·ªõi gi√° tr·ªã 99
board = np.full((3, 3), 99)

# Hi·ªÉn th·ªã b√†n c·ªù
def print_board():
    symbols = {99: ' ', 0: 'O', 1: 'X'}
    for row in board:
        print(" | ".join(symbols[cell] for cell in row))
        print("-" * 9)

# Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng
def check_winner():
    for i in range(3):
        # Ki·ªÉm tra h√†ng v√† c·ªôt
        if (board[i, 0] == board[i, 1] == board[i, 2] != 99) or \
           (board[0, i] == board[1, i] == board[2, i] != 99):
            return True
        
    # Ki·ªÉm tra ƒë∆∞·ªùng ch√©o
    if (board[0, 0] == board[1, 1] == board[2, 2] != 99) or \
       (board[0, 2] == board[1, 1] == board[2, 0] != 99):
        return True
    
    return False

# Ch·∫°y tr√≤ ch∆°i
def play_game():
    turn = 1  # B·∫Øt ƒë·∫ßu v·ªõi X (1)
    moves = 0
    print_board()
    
    while moves < 9:
        player = "X" if turn == 1 else "O"
        try:
            row, col = map(int, input(f"Ng∆∞·ªùi ch∆°i {player}, nh·∫≠p h√†ng v√† c·ªôt (0-2, c√°ch nhau b·ªüi d·∫•u c√°ch): ").split())
            if board[row, col] == 99:  # V·ªã tr√≠ tr·ªëng
                board[row, col] = turn
                print_board()
                if check_winner():
                    print(f"üéâ Ng∆∞·ªùi ch∆°i {player} th·∫Øng! üéâ")
                    return
                turn = 1 - turn  # Chuy·ªÉn l∆∞·ª£t
                moves += 1
            else:
                print("‚ö†Ô∏è √î ƒë√£ ƒë∆∞·ª£c ch·ªçn, h√£y nh·∫≠p l·∫°i!")
        except (ValueError, IndexError):
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p hai s·ªë trong kho·∫£ng [0,2]!")

    print("‚öñÔ∏è Tr√≤ ch∆°i h√≤a!")

# B·∫Øt ƒë·∫ßu tr√≤ ch∆°i
play_game()
